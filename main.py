"""
–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤.

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Å–ª–æ–≤–∞, –∏–∑—É—á–∞—Ç—å –∏—Ö, –æ—Ç–º–µ—á–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å.
–°–ª–æ–≤–∞ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –æ–±—â–∏–º —Å–ª–æ–≤–∞–º.

–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã:
- User: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.
- Word: —Å–ª–æ–≤–∞ (—Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç), —Å–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
- UserProgress: –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.
/go - –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.
"""

from sqlalchemy import or_, func
from sqlalchemy.orm import sessionmaker
from create_bd import User, Word, UserProgress
from data_file import engine
import telebot
import random
import configparser
from telebot import types

config = configparser.ConfigParser()
config.read('settings.ini')
token = config["TOKEN"]['token']

Session = sessionmaker(bind=engine)
session = Session()


class Command:
    add_word = 'add words‚ûï'
    next = 'next‚û°Ô∏è'
    delete = 'deleteüîô'


bot = telebot.TeleBot(token)


def search_user(user_id, user_name, chat_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.

    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
    :param user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param chat_id: ID —á–∞—Ç–∞
    """
    user = session.query(User).filter_by(user_id=user_id).first()
    if not user:
        new_user = User(user_name=user_name, chat_id=chat_id, user_id=user_id)
        session.add(new_user)
        session.commit()


@bot.message_handler(commands=['start'])
def start_bot(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç.
    """
    chat_id = message.chat.id
    bot.send_message(chat_id,
                     '–ü—Ä–∏–≤–µ—Ç üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ /go.')
    search_user(message.from_user.id, message.from_user.username, message.chat.id)


def create_progress(user_id, words_id):
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤–∞.

    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param words_id: ID —Å–ª–æ–≤–∞
    """
    progress = session.query(UserProgress).filter_by(
        user_id=user_id,
        words_id=words_id
    ).first()

    if not progress:
        new_progress = UserProgress(
            user_id=user_id,
            words_id=words_id,
            is_learned=True
        )
        session.add(new_progress)
    else:
        progress.is_learned = True
    session.commit()


@bot.message_handler(commands=['go'])
def go_bot(message):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –≤—ã–≤–æ–¥—è —Å–ª–æ–≤–æ –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞.
    """
    search_user(message.from_user.id, message.from_user.username, message.chat.id)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –Ω–µ–≤—ã—É—á–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
    unlearned_word = session.query(Word).filter(
        ~Word.words_id.in_(
            session.query(UserProgress.words_id)
            .filter(
                UserProgress.user_id == message.from_user.id,
                UserProgress.is_learned == True
            )
        ),
        or_(
            Word.user_id == message.from_user.id,
            Word.user_id == None
        )
    ).order_by(func.random()).first()

    if not unlearned_word:
        bot.send_message(message.chat.id, "üéâ –í—ã –≤—ã—É—á–∏–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞! –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ.")
        return

    markup = types.ReplyKeyboardMarkup(row_width=2)
    russian_word = unlearned_word.words_ru
    correct_answer = unlearned_word.words_en

    # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    other_words = session.query(Word).filter(
        or_(
            Word.user_id == message.from_user.id,
            Word.user_id == None
        ),
        Word.words_en != correct_answer
    ).order_by(func.random()).limit(3).all()

    options = [word.words_en for word in other_words]
    options.append(correct_answer)
    random.shuffle(options)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    buttons = [types.KeyboardButton(opt) for opt in options]
    buttons.extend([
        types.KeyboardButton(Command.add_word),
        types.KeyboardButton(Command.next),
        types.KeyboardButton(Command.delete)
    ])
    markup.add(*buttons)

    bot.send_message(message.chat.id, f'–°–ª–æ–≤–æ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: "{russian_word}"', reply_markup=markup)
    user_data[message.chat.id] = {
        'correct_answer': correct_answer,
        'word_id': unlearned_word.words_id
    }


@bot.message_handler(func=lambda message: message.text == Command.add_word)
def add_words(message):
    """
    –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞.
    """
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º:")
    bot.register_next_step_handler(msg, process_ru_word)


def process_ru_word(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥.
    """
    ru_word = message.text.strip()
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:")
    bot.register_next_step_handler(msg, process_en_word, ru_word)


def process_en_word(message, ru_word):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î.
    """
    en_word = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞
    exists = session.query(Word).filter(
        ((Word.words_ru == ru_word) | (Word.words_en == en_word)) &
        (or_(Word.user_id == message.from_user.id, Word.user_id == None))
    ).first()

    if exists:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –¢–∞–∫–æ–µ —Å–ª–æ–≤–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return

    new_word = Word(
        words_ru=ru_word,
        words_en=en_word,
        user_id=message.from_user.id
    )
    session.add(new_word)
    session.commit()
    bot.send_message(message.chat.id, "‚úÖ –°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! /go")


@bot.message_handler(func=lambda message: message.text == Command.delete)
def handle_delete(message):
    """
    –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞.
    """
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Ä—É—Å/–∞–Ω–≥–ª) –∏–ª–∏ '—Å—Ç–æ–ø' –¥–ª—è –æ—Ç–º–µ–Ω—ã:")
    bot.register_next_step_handler(msg, process_delete)


def process_delete(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –∏–∑ –ë–î.
    """
    if message.text.lower() == '—Å—Ç–æ–ø':
        bot.send_message(message.chat.id, "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    target = message.text.strip()
    word = session.query(Word).filter(
        ((Word.words_ru == target) | (Word.words_en == target)) &
        (Word.user_id == message.from_user.id)
    ).first()

    if not word:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
        return

    session.delete(word)
    session.commit()
    bot.send_message(message.chat.id, f"‚úÖ –°–ª–æ–≤–æ '{target}' —É–¥–∞–ª–µ–Ω–æ!")


@bot.message_handler(func=lambda message: True)
def check_answer(message):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å.
    """
    chat_id = message.chat.id
    if chat_id not in user_data:
        bot.send_message(chat_id, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–æ–º–∞–Ω–¥–æ–π /go")
        return

    user_answer = message.text
    correct_data = user_data[chat_id]

    if user_answer == correct_data['correct_answer']:
        create_progress(message.from_user.id, correct_data['word_id'])
        bot.send_message(chat_id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü!")
    else:
        bot.send_message(chat_id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")

    go_bot(message)


if __name__ == '__main__':
    user_data = {}
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.polling()