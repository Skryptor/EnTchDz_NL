#from sqlalchemy import delete
from sqlalchemy.orm import sessionmaker
from create_bd import  User, Word, UserProgress
from data_file import engine
import telebot
import random
import configparser
from telebot import types
#import requests
config = configparser.ConfigParser()
config.read('settings.ini')
token = config["TOKEN"]['token']
#token_yandex = config["TOKEN"]['token_yandex']
#url = config["TOKEN"]['url']
Session = sessionmaker(bind=engine)
session = Session()


class Command:
    add_word = 'add words‚ûï'
    next = 'next‚û°Ô∏è'
    delete = 'deleteüîô'

bot = telebot.TeleBot(token)

def search_user(user_id, user_name, chat_id):
    user = session.query(User).filter_by(user_id=user_id).first()
    if not user:
        new_user = User(user_name=user_name, chat_id=chat_id, user_id=user_id)
        session.add(new_user)
        session.commit()
        bot.send_message(chat_id, f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–ø–∏—à–∏ /go‚¨áÔ∏è")

@bot.message_handler(commands=['start'])
def start_bot(message):
    chat_id = message.chat.id
    bot.send_message(chat_id,
                     '–ü—Ä–∏–≤–µ—Ç üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ /go.')
    search_user(message.from_user.id, message.from_user.username, message.chat.id)


def create_progress(user_id, words_id):
    progress = session.query(UserProgress).filter_by(
        user_id=user_id,
        words_id=words_id
    ).first()

    if not progress:
        new_progress = UserProgress(
            user_id=user_id,
            words_id=words_id,
            is_learned=True
        )
        session.add(new_progress)
    else:
        progress.is_learned = True  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ

    session.commit()

def random_word():
    """
        –í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Word.

        :return: –û–±—ä–µ–∫—Ç —Å–ª–æ–≤–∞ –∏–∑ –ë–î –∏–ª–∏ None, –µ—Å–ª–∏ —Å–ª–æ–≤ –Ω–µ—Ç.
        """
    words = session.query(Word).all()
    if not words:
        return None
    return random.choice(words)

user_data = {}

@bot.message_handler(commands=['go'])
def go_bot(message):
    """
            –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ª–æ–≤–æ –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞.

            :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            :return: None
            """
    search_user(message.from_user.id, message.from_user.username, message.chat.id)
    markup = types.ReplyKeyboardMarkup(row_width=2)

    all_words = session.query(Word).all()
    if not all_words:
        bot.send_message(message.chat.id, "–°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π 'add words'")
        return

    #all_progress = [i[0] for i in session.query(UserProgress.words_id).filter_by(user_id=message.from_user.id).all()]

    unlearned_words = session.query(Word).filter(
        ~Word.words_id.in_(
            session.query(UserProgress.words_id)
            .filter(
                UserProgress.user_id == message.from_user.id,
                UserProgress.is_learned == True  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—É–ª–µ–≤–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
            )
        )
    ).all()

    if not unlearned_words:
        bot.send_message(message.chat.id, "üéâ –í—ã –≤—ã—É—á–∏–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞! –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ.")
        return

    word = random.choice(unlearned_words)

    russian_word = word.words_ru
    first_word = word.words_en

    all_words_en = [w.words_en for w in all_words if w.words_en != first_word]
    ofter_words = random.sample(all_words_en, min(3, len(all_words_en)))

    first_value_btn = types.KeyboardButton(first_word)
    ofter_words_btn = [types.KeyboardButton(words) for words in ofter_words]

    together = [first_value_btn] + ofter_words_btn
    random.shuffle(together)

    add_word_btn = types.KeyboardButton(Command.add_word)
    next_btn = types.KeyboardButton(Command.next)
    delete_btn = types.KeyboardButton(Command.delete)

    together.extend([add_word_btn, next_btn, delete_btn])
    markup.add(*together)

    bot.send_message(message.chat.id, f'–°–ª–æ–≤–æ –¥–ª—è —Ä–∞–∑–¥—É–º–∏–π "{russian_word}"', reply_markup=markup)

    user_data[message.chat.id] = {
        'first_word': first_word,
        'word_id': word.words_id
    }
@bot.message_handler(func=lambda message: message.text == 'add words‚ûï')
def add_words(message):
    """
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ë–î.

        :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :return: None
        """
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º:")
    bot.register_next_step_handler(msg, create_ru_word, message.chat.id)

def create_ru_word(message, chat_id):
    """
        –ü–æ–ª—É—á–∞–µ—Ç —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥.

        :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :param chat_id: ID —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç.
        :return: None
        """
    ru_word = message.text.strip()
    msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:")
    bot.register_next_step_handler(msg, create_en_word, ru_word, chat_id)

def create_en_word(message, ru_word, chat_id):
    """
        –ü–æ–ª—É—á–∞–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –ë–î, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.

        :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :param ru_word: –†—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ, –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
        :param chat_id: ID —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç.
        :return: None
        """
    en_word = message.text.strip()
    exists = session.query(Word).filter(
        (Word.words_ru == ru_word) | (Word.words_en == en_word)
    ).first()
    if exists:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –¢–∞–∫–æ–µ —Å–ª–æ–≤–æ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ")
        return

    new_word = Word(words_ru=ru_word, words_en=en_word, user_id=message.from_user.id)
    session.add(new_word)
    session.commit()
    bot.send_message(chat_id, "‚úÖ –°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! /go")



@bot.message_handler(func=lambda message: message.text == 'deleteüîô')
def learn_word(message):
    """
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.

        :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :return: None
        """
    msg = bot.send_message(message.chat.id, '–∫–∞–∫–æ–µ —Å–ª–æ–≤–æ —É–¥–∞–ª–∏—Ç—å,–º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–Ω–≥ –∏–ª–∏ —Ä—É, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª –Ω–∞–ø–∏—à–∏ "—Å—Ç–æ–ø')
    if msg == '—Å—Ç–æ–ø':# if user write stop, command stops
        start_bot(message)
    bot.register_next_step_handler(msg, process_delete)

def process_delete(message):
    """
        –£–¥–∞–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–ª–æ–≤–æ –∏–∑ –ë–î, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.

        :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :return: None
        """
    word_to_delete = message.text.strip()
    word = session.query(Word).filter(
        (Word.words_ru == word_to_delete) | (Word.words_en == word_to_delete)
    ).first()

    if not word:
        bot.send_message(message.chat.id, '‚ö†Ô∏è –¢–∞–∫–æ–µ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ.')
        return

    session.delete(word)
    session.commit()
    bot.send_message(message.chat.id, f'‚úÖ –°–ª–æ–≤–æ "{word_to_delete}" —É–¥–∞–ª–µ–Ω–æ!')

@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥–∞, –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è.

        :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :return: None
        """

    chat_id = message.chat.id
    if chat_id not in user_data:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /start")
        return

    data = user_data[chat_id]
    correct_word = data['first_word']
    word_id = data['word_id']

    if message.text == correct_word:
        create_progress(message.from_user.id, word_id)
        bot.send_message(chat_id, '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü!')
        random_word()
        go_bot(message)
    elif message.text == 'next‚û°Ô∏è':
        random_word()
        go_bot(message)
    elif message.text == 'stop' or message.text == '/stop':
        bot.send_message(chat_id, '–î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á')
    else:
        if message.text == 'stop' or message.text == '/stop':
            bot.send_message(chat_id, '–î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á')
        bot.send_message(chat_id, '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')


if __name__ == '__main__': # –Ω—É —Ç—É—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞–≤—Ä—è—Ç–ª–∏ –Ω—É–∂–Ω–∞
    print("–°—Ç–∞—Ä—Ç—É–µ–º")
    bot.polling()

    # params = {
    #
    #     'Authorization': token_yandex,
    #     'lang': 'ru-en',
    #     'text': ru_word,
    #     'ui': 'ru'
    # }
    # responses = requests.get(url, params=params)
    # if 200 <= responses.status_code < 300:
    #     contents = responses.json()
    #
    #     trans_word = contents['def'][0]['tr'][0]['text'] –Ω–æ—Ä–º —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ —Ç–æ–∫–µ–Ω –≤—Å–µ–≥–æ –ø–æ 12—á